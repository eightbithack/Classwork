package caveExplorer;

import java.util.Arrays;
import java.util.Scanner;

public class TwoDArraysIntro {
	
	public static Scanner in = new Scanner(System.in);
	static String[][] arr2D;
	static String[][] pic;
	static int starti;
	static int startj;
	static int treasurei;
	static int treasurej;
	
	public static void main(String[] args){
		arr2D = new String[5][5];
		pic = new String[5][5];
		for(int row = 0; row < arr2D.length; row++){
			for(int col = 0; col < arr2D[row].length; col++){
				arr2D[row][col] = "("+row+", "+col+")";
			}
		}
		
		starti = 2;
		startj = 2;
		treasurei = 4;
		treasurej = 3;
		StartExploring();
	}

	private static void StartExploring() {
		while (true){
			for (int row = 0; row < pic.length; row ++){
				for (int col = 0; col < pic[row].length; col ++){
					if (row == starti && col == startj){
						pic[row][col] = "X";
					}
					else{
						pic[row][col] = " ";
					}
				}
			}
			printPic(pic);
			System.out.println("You are in room "+arr2D[starti][startj]+".");
			if (starti == treasurei && startj == treasurej){
				System.out.println("You found the treasure!");
				break;
			}
			System.out.println("What do you want to do?");
			String input = in.nextLine();
			int[] newCoordinates = interpretInput(input);
			starti = newCoordinates[0];
			startj = newCoordinates[1];
		}
		
	}


	private static int[] interpretInput(String input) {
		while(!IsValid(input)){
			System.out.println("Sorry, in this game, you can only use WASD.");
			System.out.println("Tell me again what you would like to do.");
			input = in.nextLine();
		}
		int currenti = starti;
		int currentj = startj;
		input = input.toLowerCase();
		if (input.equals("w")){
			currenti--;
		}
		if (input.equals("s")){
			currenti++;
		}
		if (input.equals("a")){
			currentj--;
		}
		if (input.equals("d")){
			currentj++;
		}
		int[] newCoordinates = {starti, startj};
		if(currenti>=0 && currenti < arr2D.length && currentj >= 0 && currentj < arr2D[0].length){
			newCoordinates[0] = currenti;
			newCoordinates[1] = currentj;
		}
		else{
			System.out.println("You've reached the edge");
		}
		return newCoordinates;
	}

	
	private static boolean IsValid(String input) {
		String[] validKeys = {"w", "a", "s", "d"};
		for (String key : validKeys){
			if (input.toLowerCase().equals(key)){
				return true;
			}
		}
		return false;
	}

	
	
	
	
	
	
	
	
	
	public static void mineSweeper(){
		boolean[][] mines = new boolean[6][6];
		plantMines(mines);
		String[][] field = createField(mines);
		printPic(field);
	}
	
	
	private static String[][] createField(boolean[][] mines) {
		String[][] field = new String[mines.length][mines[0].length];
		for (int row = 0; row < field.length; row++){
			for (int col = 0; col < field[row].length; col++){
				if (mines[row][col]) field[row][col] = "X";
				else{
					field[row][col] = countNearby(mines, row, col);
				}
			}
		}
		return field;
	}

	private static String countNearby(boolean[][] mines, int row, int col) {
//		for(int r = row - 1; r <= row + 1; r++){
//			for (int c = col-1; c <= col + 1; c++){
//				if (r >= 0 && r < mines.length && c >= 0 && c < mines[0].length){
//					
//				}
//			}
//		}
		
		//this method only considers actual elements 
//		int count = 0;
//		for (int r = 0; r < mines.length; r++){
//			for (int c = 0; c < mines[r].length; c++){
//				if(Math.abs(r-row) + Math.abs(c-col) == 1 && mines[r][c]){
//					count++;
//				}
//			}
//		}
//		return ""+count;
		//this method allows you to be most specific
		//for example, if you only wanted north and east
		int count = 0;
		count += isValidAndTrue(mines,row-1, col);
		count += isValidAndTrue(mines,row+1, col);
		count += isValidAndTrue(mines,row, col-1);
		count += isValidAndTrue(mines,row, col+1);
		return ""+count;
	}

	private static int isValidAndTrue(boolean[][] mines, int i, int j) {
		if(i >= 0 && i < mines.length && j >=0 && j < mines[0].length && mines[i][j]){
			return 1;
		}
		return 0;
	}

	private static void plantMines(boolean[][] mines) {
		int numberOfMines = 10;
		while (numberOfMines > 0){
			int row = (int)(Math.random() * mines.length);
			int col = (int)(Math.random() * mines[0].length);
		
			if(!mines[row][col]){
				mines[row][col] = true;
				numberOfMines--;
			}
		}
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public static void classNotes(){
		String[][]pic = new String[10][8];
		for(int row = 0; row < pic.length; row++){
			for(int col = 0; col < pic[row].length; col++){
				pic[row][col] = " ";
			}
		}
		//grassy field
		pic[3][4] = "o";
		pic[2][4] = "|";
		pic[4][4] = "|";
		pic[3][3] = "-";
		pic[3][5] = "-";
		for (int top = 0; top < pic[0].length; top++){
			pic[0][top] = "_";
			pic[pic.length-1][top] = "_";
		}
		for (int top = 1; top < pic.length; top++){
			pic[top][0] = "|";
			pic[top][pic[0].length-1] = "|";
		}
		
		for(String[] row : pic){
			for(String col: row){
				System.out.print(col);
			}
			System.out.println();
		}

	}
	
	public static void printPic (String[][] pic){
		for(String[] row : pic){
			for(String col: row){
				System.out.print(col);
			}
			System.out.println();
		}
	}

	public static void intro() {
		String[] xox = {"x", "o","x", "o","x"};
		System.out.println(Arrays.toString(xox));
		//a 1D array prints a horizontal array
		
		String[][] arr2D = new String[5][4];
		System.out.println("The height is "+arr2D.length);
		System.out.println("The width is "+arr2D[0].length);
		for(int row = 0; row < arr2D.length; row++){
			for(int col = 0; col < arr2D[row].length; col++){
				arr2D[row][col] = "("+row+", "+col+")";
			}
		}
		//print 2D array
		//every element in a 2D array is itself an array, so a for-each loop looks like this
		for(String[] row : arr2D){
			System.out.println(Arrays.toString(row));
		}
	}
	
}
